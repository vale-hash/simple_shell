/**
 *main - a program that mimics the bash shell
 * @argv: total number of arguments passed in the shell
 * @argc : poitter to an array of arguemnts passed in the shell
 * Return: argv
 */
#include "shell.h"

int main(int argc, char **argv)
{
	char **tokens;
	char *buf;
	int token_num;
	ssize_t buf_size;
	size_t n;
	char *prompt;
	bool p;
	char *delim;
	int i, j;

	(void) argc;
	n = 10;
	buf = NULL;
	prompt = "(Bshell)#";
	p = true;
	delim = " \n";
	while (p == true)
	{
		write(1, prompt, 7);
		buf_size = getline(&buf, &n, stdin);
		if (buf_size == -1)
		{
			free(buf);
			return (-1);
		}
		tokens = _tokenize(buf, delim, &token_num);

		if (tokens == NULL)
		{
			free(buf);
			return (-1);
		}

		argv = malloc(sizeof(char *) * (token_num + 1));
		if (argv == NULL) {
			perror("Memory allocation failed");
			free(buf);
			for (i = 0; tokens[i] != NULL; i++) 
			{
				free(tokens[i]);
			}
			free(tokens);
			return (-1);
		}

        for (i = 0; i < token_num; i++) {
            argv[i] = malloc(sizeof(char) * (strlen(tokens[i]) + 1));
            if (argv[i] == NULL) {
                perror("Memory allocation failed");
                free(buf);
                for ( j = 0; j < i; j++) {
                    free(argv[j]);
                }
                free(argv);
                for (i = 0; tokens[i] != NULL; i++) {
                    free(tokens[i]);
                }
                free(tokens);
                return (-1);
            }
            strcpy(argv[i], tokens[i]);
        }
        argv[token_num] = NULL;

        execmd(argv);

        for (i = 0; i < token_num; i++) {
            free(argv[i]);
        }
        free(argv);

        for (i = 0; tokens[i] != NULL; i++) {
            free(tokens[i]);
        }
        free(tokens);
    }

    free(buf);
    return (0);
}

